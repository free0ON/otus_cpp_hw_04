name: CMake
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  PRJ_NAME: "HW04_SFINAE" # name without spaces
  PRJ_VERSION_MAJOR: 0
  PRJ_VERSION_MINOR: 0
  PRJ_VERSION_PATCH: ${{ github.run_number }}
  PRJ_DESCRIPTION: "Otus_CPP_HW04_SFINAE" # description without spaces
  PRJ_HOMEPAGE_URL: "${{ github.server_url }}//${{ github.repository }}"
  PRJ_CMAKE_MIN_VERSION: 3.2
  EMAIL_CONTACT: dmitrii.lozovoi@yandex.ru
  GOOGLE_TEST: ON
  BUILD_TYPE: Release
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The CMake configure and build commands are platform-agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Load Test library
        run: |
          git clone https://github.com/google/googletest
          cd googletest
          cmake -Bbuild -H. -DBUILD_GMOCK=OFF
          sudo cmake --build build --target install
          cd ${{github.workspace}}
        if: (env.GOOGLE_TEST == 'ON')
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        # -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        run: |
          cmake . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DPRJ_NAME=${{ env.PRJ_NAME }} \
          -DPRJ_VERSION_MAJOR=${{ env.PRJ_VERSION_MAJOR }} \
          -DPRJ_VERSION_MINOR=${{ env.PRJ_VERSION_MINOR }} \
          -DPRJ_VERSION_PATCH=${{ env.PRJ_VERSION_PATCH }} \
          -DPRJ_DESCRIPTION=${{ env.PRJ_DESCRIPTION }} \
          -DPRJ_HOMEPAGE_URL=${{ env.PRJ_HOMEPAGE_URL }} \
          -DPRJ_CMAKE_MIN_VERSION=${{ env.PRJ_CMAKE_MIN_VERSION }} \
          -DEMAIL_CONTACT=${{ env.EMAIL_CONTACT }} \
          -DGOOGLE_TEST=${{ env.GOOGLE_TEST }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build . --config ${{env.BUILD_TYPE}}
        # Run test
      - name: Test
        working-directory: ${{github.workspace}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
        if: (env.GOOGLE_TEST == 'ON')
        # Create release
      - name: Build package
        run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

          # Upload release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{github.workspace}}/${{ env.PRJ_NAME }}-${{ env.PRJ_VERSION_MAJOR}}.${{ env.PRJ_VERSION_MINOR}}.${{ env.PRJ_VERSION_PATCH}}-Linux.deb
          asset_name: ${{ env.PRJ_NAME }}-${{ env.PRJ_VERSION_MAJOR}}.${{ env.PRJ_VERSION_MINOR}}.${{ env.PRJ_VERSION_PATCH }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package